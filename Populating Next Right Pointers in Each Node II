/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : 
    val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
Node* connect(Node* root) {
    if(!root)
        return root;
    Node *curr=NULL, *next, *prev=root;
    while(prev){
        curr=NULL;
        while(prev){
            if(!curr){
                if(prev->left){
                    curr=prev->left;
                    next=prev->left;
                }
                else{ 
                    curr=prev->right;
                    next=prev->right;
                }
            }
            if(curr){
                curr->next=prev->left;
                if(curr->next)
                    curr=curr->next;
            }
            if(curr){
                curr->next=prev->right;
                if(curr->next)
                    curr=curr->next;
            }
            prev=prev->next;
        }
        if(curr)
            curr->next=NULL;
        prev=next;
    }
    return root;
}
};
